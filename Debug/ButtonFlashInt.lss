
ButtonFlashInt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000002c0  00000354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800208  00800208  0000035c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e01  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c6d  00000000  00000000  000011fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000448  00000000  00000000  00001e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  000022b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a5  00000000  00000000  0000230c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a2  00000000  00000000  000028b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00002a53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 ec       	ldi	r30, 0xC0	; 192
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e0       	ldi	r26, 0x08	; 8
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 30       	cpi	r26, 0x0A	; 10
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	7d d0       	rcall	.+250    	; 0x21a <main>
 120:	cd c0       	rjmp	.+410    	; 0x2bc <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <checkButtons>:
//Returns true if button pressed
int checkButtons() {
	int buttonPress = 0;
	
	//Button 0 has been pressed
	if(curr6 && !prev6) {
 124:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <curr6>
 128:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <curr6+0x1>
 12c:	21 15       	cp	r18, r1
 12e:	31 05       	cpc	r19, r1
 130:	d1 f0       	breq	.+52     	; 0x166 <checkButtons+0x42>
 132:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <prev6>
 136:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <prev6+0x1>
 13a:	89 2b       	or	r24, r25
 13c:	b9 f4       	brne	.+46     	; 0x16c <checkButtons+0x48>
		if(state == CYCLE_STATE)
 13e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
 142:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <__data_end+0x1>
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	39 f4       	brne	.+14     	; 0x158 <checkButtons+0x34>
			state = OFF_STATE;
 14a:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <__data_end+0x1>
 14e:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <__data_end>
		else
			state = CYCLE_STATE;
		buttonPress = 1;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0c c0       	rjmp	.+24     	; 0x170 <checkButtons+0x4c>
	//Button 0 has been pressed
	if(curr6 && !prev6) {
		if(state == CYCLE_STATE)
			state = OFF_STATE;
		else
			state = CYCLE_STATE;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__data_end+0x1>
 160:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
 164:	05 c0       	rjmp	.+10     	; 0x170 <checkButtons+0x4c>
	}
}

//Returns true if button pressed
int checkButtons() {
	int buttonPress = 0;
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <checkButtons+0x4c>
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
		else
			state = CYCLE_STATE;
		buttonPress = 1;
	}
	//Button 1 has been pressed
	if(curr7 && !prev7) {
 170:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <curr7>
 174:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <curr7+0x1>
 178:	41 15       	cp	r20, r1
 17a:	51 05       	cpc	r21, r1
 17c:	d9 f0       	breq	.+54     	; 0x1b4 <checkButtons+0x90>
 17e:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__data_start>
 182:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__data_start+0x1>
 186:	67 2b       	or	r22, r23
 188:	a9 f4       	brne	.+42     	; 0x1b4 <checkButtons+0x90>
		if(state == FLASH_STATE)
 18a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
 18e:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <__data_end+0x1>
 192:	02 97       	sbiw	r24, 0x02	; 2
 194:	39 f4       	brne	.+14     	; 0x1a4 <checkButtons+0x80>
			state = OFF_STATE;
 196:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <__data_end+0x1>
 19a:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <__data_end>
		else
			state = FLASH_STATE;
		buttonPress = 1;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	08 c0       	rjmp	.+16     	; 0x1b4 <checkButtons+0x90>
	//Button 1 has been pressed
	if(curr7 && !prev7) {
		if(state == FLASH_STATE)
			state = OFF_STATE;
		else
			state = FLASH_STATE;
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__data_end+0x1>
 1ac:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		buttonPress = 1;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	prev6 = curr6;
 1b4:	30 93 05 02 	sts	0x0205, r19	; 0x800205 <prev6+0x1>
 1b8:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <prev6>
	curr6 = 0x40 & PINF; //0100 0000
 1bc:	2f b1       	in	r18, 0x0f	; 15
 1be:	20 74       	andi	r18, 0x40	; 64
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <curr6+0x1>
 1c6:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <curr6>
	
	prev7 = curr7;
 1ca:	50 93 01 02 	sts	0x0201, r21	; 0x800201 <__data_start+0x1>
 1ce:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <__data_start>
	curr7 = 0x80 & PINF; //1000 0000
 1d2:	2f b1       	in	r18, 0x0f	; 15
 1d4:	20 78       	andi	r18, 0x80	; 128
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	30 93 03 02 	sts	0x0203, r19	; 0x800203 <curr7+0x1>
 1dc:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <curr7>
	
	return buttonPress;
}
 1e0:	08 95       	ret

000001e2 <delay>:
		}
    }
}

//Break out needed
void delay(int ms) {
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
	for(int i = 0; i < ms; i++) {
 1ea:	18 16       	cp	r1, r24
 1ec:	19 06       	cpc	r1, r25
 1ee:	84 f4       	brge	.+32     	; 0x210 <delay+0x2e>
 1f0:	8c 01       	movw	r16, r24
 1f2:	c0 e0       	ldi	r28, 0x00	; 0
 1f4:	d0 e0       	ldi	r29, 0x00	; 0
		if(checkButtons())
 1f6:	96 df       	rcall	.-212    	; 0x124 <checkButtons>
 1f8:	89 2b       	or	r24, r25
 1fa:	51 f4       	brne	.+20     	; 0x210 <delay+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fc:	89 ef       	ldi	r24, 0xF9	; 249
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <delay+0x1e>
 204:	00 c0       	rjmp	.+0      	; 0x206 <delay+0x24>
 206:	00 00       	nop
    }
}

//Break out needed
void delay(int ms) {
	for(int i = 0; i < ms; i++) {
 208:	21 96       	adiw	r28, 0x01	; 1
 20a:	c0 17       	cp	r28, r16
 20c:	d1 07       	cpc	r29, r17
 20e:	99 f7       	brne	.-26     	; 0x1f6 <delay+0x14>
		if(checkButtons())
			break;
		_delay_ms(1);
	}
}
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	1f 91       	pop	r17
 216:	0f 91       	pop	r16
 218:	08 95       	ret

0000021a <main>:
int curr7 = 1;
int prev7 = 1; 

int main(void)
{
	DDRF &= ~0xC0; //Setting pin 6 and 7 for input
 21a:	80 b3       	in	r24, 0x10	; 16
 21c:	8f 73       	andi	r24, 0x3F	; 63
 21e:	80 bb       	out	0x10, r24	; 16
	PORTF |= 0xC0; //Setting pin 6 and 7 to idle at high voltage
 220:	81 b3       	in	r24, 0x11	; 17
 222:	80 6c       	ori	r24, 0xC0	; 192
 224:	81 bb       	out	0x11, r24	; 17
	PORTF &= ~0x0F; //LEDs off
 226:	81 b3       	in	r24, 0x11	; 17
 228:	80 7f       	andi	r24, 0xF0	; 240
 22a:	81 bb       	out	0x11, r24	; 17
	
	int light_index = 0;
 22c:	c0 e0       	ldi	r28, 0x00	; 0
 22e:	d0 e0       	ldi	r29, 0x00	; 0
			delay(1000);
		} 
		//Off State
		else if(state == OFF_STATE) {
			PORTF &= ~0x0F;
			light_index = 0;
 230:	e1 2c       	mov	r14, r1
 232:	f1 2c       	mov	r15, r1
		}
		//Cycling State
		else if(state == CYCLE_STATE) {
			PORTF &= ~0x0F;
			light_index = (light_index + 1) % 4;
			PORTF |= (1 << light_index);
 234:	01 e0       	ldi	r16, 0x01	; 1
 236:	10 e0       	ldi	r17, 0x00	; 0
	int light_index = 0;
	
    while (1)
    {
		//Flashing State
		if(state == FLASH_STATE) {
 238:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
 23c:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <__data_end+0x1>
 240:	82 30       	cpi	r24, 0x02	; 2
 242:	91 05       	cpc	r25, r1
 244:	99 f4       	brne	.+38     	; 0x26c <main+0x52>
			//Lights are off
			if(light_index == 0) {
 246:	cd 2b       	or	r28, r29
 248:	41 f4       	brne	.+16     	; 0x25a <main+0x40>
				PORTF |= 0x0F;
 24a:	81 b3       	in	r24, 0x11	; 17
 24c:	8f 60       	ori	r24, 0x0F	; 15
 24e:	81 bb       	out	0x11, r24	; 17
				light_index = 1;
				delay(200);
 250:	88 ec       	ldi	r24, 0xC8	; 200
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	c6 df       	rcall	.-116    	; 0x1e2 <delay>
		//Flashing State
		if(state == FLASH_STATE) {
			//Lights are off
			if(light_index == 0) {
				PORTF |= 0x0F;
				light_index = 1;
 256:	e8 01       	movw	r28, r16
 258:	ef cf       	rjmp	.-34     	; 0x238 <main+0x1e>
				delay(200);
			} 
			//Lights are on
			else {
				PORTF &= ~0x0F;
 25a:	81 b3       	in	r24, 0x11	; 17
 25c:	80 7f       	andi	r24, 0xF0	; 240
 25e:	81 bb       	out	0x11, r24	; 17
				light_index = 0;
				delay(1000);
 260:	88 ee       	ldi	r24, 0xE8	; 232
 262:	93 e0       	ldi	r25, 0x03	; 3
 264:	be df       	rcall	.-132    	; 0x1e2 <delay>
				delay(200);
			} 
			//Lights are on
			else {
				PORTF &= ~0x0F;
				light_index = 0;
 266:	ce 2d       	mov	r28, r14
 268:	df 2d       	mov	r29, r15
 26a:	e6 cf       	rjmp	.-52     	; 0x238 <main+0x1e>
				delay(1000);
			}
		}
		//Cycling State
		else if(state == CYCLE_STATE) {
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	91 05       	cpc	r25, r1
 270:	e1 f4       	brne	.+56     	; 0x2aa <main+0x90>
			PORTF &= ~0x0F;
 272:	81 b3       	in	r24, 0x11	; 17
 274:	80 7f       	andi	r24, 0xF0	; 240
 276:	81 bb       	out	0x11, r24	; 17
			light_index = (light_index + 1) % 4;
 278:	21 96       	adiw	r28, 0x01	; 1
 27a:	ce 01       	movw	r24, r28
 27c:	83 70       	andi	r24, 0x03	; 3
 27e:	90 78       	andi	r25, 0x80	; 128
 280:	99 23       	and	r25, r25
 282:	24 f4       	brge	.+8      	; 0x28c <main+0x72>
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	8c 6f       	ori	r24, 0xFC	; 252
 288:	9f 6f       	ori	r25, 0xFF	; 255
 28a:	01 96       	adiw	r24, 0x01	; 1
 28c:	ec 01       	movw	r28, r24
			PORTF |= (1 << light_index);
 28e:	21 b3       	in	r18, 0x11	; 17
 290:	a8 01       	movw	r20, r16
 292:	02 c0       	rjmp	.+4      	; 0x298 <main+0x7e>
 294:	44 0f       	add	r20, r20
 296:	55 1f       	adc	r21, r21
 298:	8a 95       	dec	r24
 29a:	e2 f7       	brpl	.-8      	; 0x294 <main+0x7a>
 29c:	ca 01       	movw	r24, r20
 29e:	82 2b       	or	r24, r18
 2a0:	81 bb       	out	0x11, r24	; 17
			delay(1000);
 2a2:	88 ee       	ldi	r24, 0xE8	; 232
 2a4:	93 e0       	ldi	r25, 0x03	; 3
 2a6:	9d df       	rcall	.-198    	; 0x1e2 <delay>
 2a8:	c7 cf       	rjmp	.-114    	; 0x238 <main+0x1e>
		} 
		//Off State
		else if(state == OFF_STATE) {
 2aa:	89 2b       	or	r24, r25
 2ac:	29 f6       	brne	.-118    	; 0x238 <main+0x1e>
			PORTF &= ~0x0F;
 2ae:	81 b3       	in	r24, 0x11	; 17
 2b0:	80 7f       	andi	r24, 0xF0	; 240
 2b2:	81 bb       	out	0x11, r24	; 17
			light_index = 0;
			checkButtons();
 2b4:	37 df       	rcall	.-402    	; 0x124 <checkButtons>
			delay(1000);
		} 
		//Off State
		else if(state == OFF_STATE) {
			PORTF &= ~0x0F;
			light_index = 0;
 2b6:	ce 2d       	mov	r28, r14
 2b8:	df 2d       	mov	r29, r15
 2ba:	be cf       	rjmp	.-132    	; 0x238 <main+0x1e>

000002bc <_exit>:
 2bc:	f8 94       	cli

000002be <__stop_program>:
 2be:	ff cf       	rjmp	.-2      	; 0x2be <__stop_program>
