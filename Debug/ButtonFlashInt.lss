
ButtonFlashInt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000003c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000350  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800200  00800200  000003c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000438  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ea8  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cab  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ac  00000000  00000000  00001fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00002590  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c8  00000000  00000000  00002640  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000026d  00000000  00000000  00002c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00002e75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4a c1       	rjmp	.+660    	; 0x2c2 <__vector_11>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a4 30       	cpi	r26, 0x04	; 4
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	7d d0       	rcall	.+250    	; 0x200 <main>
 106:	22 c1       	rjmp	.+580    	; 0x34c <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <delay_usec>:
		.section .text
		.global	delay_usec

 delay_usec:		;4 cycles of RCALL
					;2 cycles for parameter => parameter is in r24 and r25
	ldi r18, 0x01	;set to one
 10a:	21 e0       	ldi	r18, 0x01	; 1
	eor r19, r19	;zero out high bits
 10c:	33 27       	eor	r19, r19
	cp	r18, r24
 10e:	28 17       	cp	r18, r24
	cpc r19, r25	;Check if parameter is 1
 110:	39 07       	cpc	r19, r25
	brne testzero	;two cycles if true, one if false
 112:	09 f4       	brne	.+2      	; 0x116 <testzero>
	ret				;If one, branch fails
 114:	08 95       	ret

00000116 <testzero>:
	
testzero:			;at 12 cycles
	eor r18, r18	;zero low bits
 116:	22 27       	eor	r18, r18
	cp  r18, r24
 118:	28 17       	cp	r18, r24
	cpc r19, r25	
 11a:	39 07       	cpc	r19, r25
	breq zero		;at 16 cycles if fail, 17 if parameter is zero
 11c:	79 f0       	breq	.+30     	; 0x13c <zero>

0000011e <loop>:

loop:				;16 cycles have passed, parameter needs to be parameter-1
	sbiw r24, 0x01	;2 cycles, parameter-1
 11e:	01 97       	sbiw	r24, 0x01	; 1
	nop
 120:	00 00       	nop
	nop
 122:	00 00       	nop
	nop
 124:	00 00       	nop
	ldi r18, 0x01	;set to one
 126:	21 e0       	ldi	r18, 0x01	; 1
	eor r19, r19	;zero out high bits
 128:	33 27       	eor	r19, r19
	cp	r18, r24
 12a:	28 17       	cp	r18, r24
	cpc r19, r25
 12c:	39 07       	cpc	r19, r25
	breq one		;if one => 2 cycles, if greater than => 1 cycle
 12e:	29 f0       	breq	.+10     	; 0x13a <one>
	...
	nop
	nop
	nop
	nop
	rjmp loop
 138:	f2 cf       	rjmp	.-28     	; 0x11e <loop>

0000013a <one>:

one:
	ret				;5 cycles
 13a:	08 95       	ret

0000013c <zero>:
		
zero:				;17 cycles, need to burn 15, then jump to loop with MAX-1
	ldi	r24, 0xFF				
 13c:	8f ef       	ldi	r24, 0xFF	; 255
	ldi r25, 0xFF	;sets parameter to 65536-1
 13e:	9f ef       	ldi	r25, 0xFF	; 255
	...
	nop
	nop
	nop
	nop
	nop
	nop
 154:	00 00       	nop
 156:	e3 cf       	rjmp	.-58     	; 0x11e <loop>

00000158 <checkButtons>:
//Returns true if button pressed
int checkButtons() {
	int buttonPress = 0;
	
	//Button 0 has been pressed
	if(button0Pressed) {
 158:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <button0Pressed>
 15c:	88 23       	and	r24, r24
 15e:	b1 f0       	breq	.+44     	; 0x18c <checkButtons+0x34>
		button0Pressed = false;
 160:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <button0Pressed>
		if(state == CYCLE_STATE)
 164:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 168:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	39 f4       	brne	.+14     	; 0x17e <checkButtons+0x26>
			state = OFF_STATE;
 170:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <_edata+0x1>
 174:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
		else
			state = CYCLE_STATE;
		buttonPress = 1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	09 c0       	rjmp	.+18     	; 0x190 <checkButtons+0x38>
	if(button0Pressed) {
		button0Pressed = false;
		if(state == CYCLE_STATE)
			state = OFF_STATE;
		else
			state = CYCLE_STATE;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <_edata+0x1>
 186:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
 18a:	02 c0       	rjmp	.+4      	; 0x190 <checkButtons+0x38>
	}
}

//Returns true if button pressed
int checkButtons() {
	int buttonPress = 0;
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
		else
			state = CYCLE_STATE;
		buttonPress = 1;
	}
	//Button 1 has been pressed
	if(button1Pressed) {
 190:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <button1Pressed>
 194:	22 23       	and	r18, r18
 196:	b9 f0       	breq	.+46     	; 0x1c6 <checkButtons+0x6e>
		button1Pressed = false;
 198:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <button1Pressed>
		if(state == FLASH_STATE)
 19c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 1a0:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
 1a4:	02 97       	sbiw	r24, 0x02	; 2
 1a6:	39 f4       	brne	.+14     	; 0x1b6 <checkButtons+0x5e>
			state = OFF_STATE;
 1a8:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <_edata+0x1>
 1ac:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
		else
			state = FLASH_STATE;
		buttonPress = 1;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	08 95       	ret
	if(button1Pressed) {
		button1Pressed = false;
		if(state == FLASH_STATE)
			state = OFF_STATE;
		else
			state = FLASH_STATE;
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <_edata+0x1>
 1be:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
		buttonPress = 1;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	return buttonPress;
}
 1c6:	08 95       	ret

000001c8 <delay>:
		}
	}
}

//Break out needed
void delay(int ms) {
 1c8:	0f 93       	push	r16
 1ca:	1f 93       	push	r17
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
	for(int i = 0; i < ms; i++) {
 1d0:	18 16       	cp	r1, r24
 1d2:	19 06       	cpc	r1, r25
 1d4:	84 f4       	brge	.+32     	; 0x1f6 <delay+0x2e>
 1d6:	8c 01       	movw	r16, r24
 1d8:	c0 e0       	ldi	r28, 0x00	; 0
 1da:	d0 e0       	ldi	r29, 0x00	; 0
		if(checkButtons())
 1dc:	bd df       	rcall	.-134    	; 0x158 <checkButtons>
 1de:	89 2b       	or	r24, r25
 1e0:	51 f4       	brne	.+20     	; 0x1f6 <delay+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e2:	8f e9       	ldi	r24, 0x9F	; 159
 1e4:	9f e0       	ldi	r25, 0x0F	; 15
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <delay+0x1e>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <delay+0x24>
 1ec:	00 00       	nop
	}
}

//Break out needed
void delay(int ms) {
	for(int i = 0; i < ms; i++) {
 1ee:	21 96       	adiw	r28, 0x01	; 1
 1f0:	c0 17       	cp	r28, r16
 1f2:	d1 07       	cpc	r29, r17
 1f4:	99 f7       	brne	.-26     	; 0x1dc <delay+0x14>
		if(checkButtons())
			break;
		_delay_ms(1);
	}
}
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	1f 91       	pop	r17
 1fc:	0f 91       	pop	r16
 1fe:	08 95       	ret

00000200 <main>:
int state = OFF_STATE;

int main(void)
{
	//Change input to PORTK0 A8; PORTK1 A9
	DDRK &= ~0x03; //Setting pin 0 and 1 for input
 200:	e7 e0       	ldi	r30, 0x07	; 7
 202:	f1 e0       	ldi	r31, 0x01	; 1
 204:	80 81       	ld	r24, Z
 206:	8c 7f       	andi	r24, 0xFC	; 252
 208:	80 83       	st	Z, r24
	PORTK |= 0x03; //Setting pin 0 and 1 to idle at high voltage
 20a:	e8 e0       	ldi	r30, 0x08	; 8
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	80 81       	ld	r24, Z
 210:	83 60       	ori	r24, 0x03	; 3
 212:	80 83       	st	Z, r24
	PORTF &= ~0x0F; //LEDs off
 214:	81 b3       	in	r24, 0x11	; 17
 216:	80 7f       	andi	r24, 0xF0	; 240
 218:	81 bb       	out	0x11, r24	; 17
	
	PCICR |= 0x04;	//Enabling PCIE2 to accept interrupts
 21a:	e8 e6       	ldi	r30, 0x68	; 104
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	84 60       	ori	r24, 0x04	; 4
 222:	80 83       	st	Z, r24
	PCMSK2 |= 0x03; //Specifically enabling PCINT16 and 17s
 224:	ed e6       	ldi	r30, 0x6D	; 109
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	83 60       	ori	r24, 0x03	; 3
 22c:	80 83       	st	Z, r24
	
	int light_index = 0;
 22e:	c0 e0       	ldi	r28, 0x00	; 0
 230:	d0 e0       	ldi	r29, 0x00	; 0
			delay(1000);
		}
		//Off State
		else if(state == OFF_STATE) {
			PORTF &= ~0x0F;
			light_index = 0;
 232:	e1 2c       	mov	r14, r1
 234:	f1 2c       	mov	r15, r1
		}
		//Cycling State
		else if(state == CYCLE_STATE) {
			PORTF &= ~0x0F;
			light_index = (light_index + 1) % 4;
			PORTF |= (1 << light_index);
 236:	01 e0       	ldi	r16, 0x01	; 1
 238:	10 e0       	ldi	r17, 0x00	; 0
	
	int light_index = 0;
	
	while (1)
	{
		sei();
 23a:	78 94       	sei
		//Flashing State
		if(state == FLASH_STATE) {
 23c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 240:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
 244:	82 30       	cpi	r24, 0x02	; 2
 246:	91 05       	cpc	r25, r1
 248:	99 f4       	brne	.+38     	; 0x270 <main+0x70>
			//Lights are off
			if(light_index == 0) {
 24a:	cd 2b       	or	r28, r29
 24c:	41 f4       	brne	.+16     	; 0x25e <main+0x5e>
				PORTF |= 0x0F;
 24e:	81 b3       	in	r24, 0x11	; 17
 250:	8f 60       	ori	r24, 0x0F	; 15
 252:	81 bb       	out	0x11, r24	; 17
				light_index = 1;
				delay(200);
 254:	88 ec       	ldi	r24, 0xC8	; 200
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	b7 df       	rcall	.-146    	; 0x1c8 <delay>
		//Flashing State
		if(state == FLASH_STATE) {
			//Lights are off
			if(light_index == 0) {
				PORTF |= 0x0F;
				light_index = 1;
 25a:	e8 01       	movw	r28, r16
 25c:	ee cf       	rjmp	.-36     	; 0x23a <main+0x3a>
				delay(200);
			}
			//Lights are on
			else {
				PORTF &= ~0x0F;
 25e:	81 b3       	in	r24, 0x11	; 17
 260:	80 7f       	andi	r24, 0xF0	; 240
 262:	81 bb       	out	0x11, r24	; 17
				light_index = 0;
				delay(1000);
 264:	88 ee       	ldi	r24, 0xE8	; 232
 266:	93 e0       	ldi	r25, 0x03	; 3
 268:	af df       	rcall	.-162    	; 0x1c8 <delay>
				delay(200);
			}
			//Lights are on
			else {
				PORTF &= ~0x0F;
				light_index = 0;
 26a:	ce 2d       	mov	r28, r14
 26c:	df 2d       	mov	r29, r15
 26e:	e5 cf       	rjmp	.-54     	; 0x23a <main+0x3a>
				delay(1000);
			}
		}
		//Cycling State
		else if(state == CYCLE_STATE) {
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	91 05       	cpc	r25, r1
 274:	e1 f4       	brne	.+56     	; 0x2ae <main+0xae>
			PORTF &= ~0x0F;
 276:	81 b3       	in	r24, 0x11	; 17
 278:	80 7f       	andi	r24, 0xF0	; 240
 27a:	81 bb       	out	0x11, r24	; 17
			light_index = (light_index + 1) % 4;
 27c:	21 96       	adiw	r28, 0x01	; 1
 27e:	ce 01       	movw	r24, r28
 280:	83 70       	andi	r24, 0x03	; 3
 282:	90 78       	andi	r25, 0x80	; 128
 284:	99 23       	and	r25, r25
 286:	24 f4       	brge	.+8      	; 0x290 <main+0x90>
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	8c 6f       	ori	r24, 0xFC	; 252
 28c:	9f 6f       	ori	r25, 0xFF	; 255
 28e:	01 96       	adiw	r24, 0x01	; 1
 290:	ec 01       	movw	r28, r24
			PORTF |= (1 << light_index);
 292:	21 b3       	in	r18, 0x11	; 17
 294:	a8 01       	movw	r20, r16
 296:	02 c0       	rjmp	.+4      	; 0x29c <main+0x9c>
 298:	44 0f       	add	r20, r20
 29a:	55 1f       	adc	r21, r21
 29c:	8a 95       	dec	r24
 29e:	e2 f7       	brpl	.-8      	; 0x298 <main+0x98>
 2a0:	ca 01       	movw	r24, r20
 2a2:	82 2b       	or	r24, r18
 2a4:	81 bb       	out	0x11, r24	; 17
			delay(1000);
 2a6:	88 ee       	ldi	r24, 0xE8	; 232
 2a8:	93 e0       	ldi	r25, 0x03	; 3
 2aa:	8e df       	rcall	.-228    	; 0x1c8 <delay>
 2ac:	c6 cf       	rjmp	.-116    	; 0x23a <main+0x3a>
		}
		//Off State
		else if(state == OFF_STATE) {
 2ae:	89 2b       	or	r24, r25
 2b0:	09 f0       	breq	.+2      	; 0x2b4 <main+0xb4>
 2b2:	c3 cf       	rjmp	.-122    	; 0x23a <main+0x3a>
			PORTF &= ~0x0F;
 2b4:	81 b3       	in	r24, 0x11	; 17
 2b6:	80 7f       	andi	r24, 0xF0	; 240
 2b8:	81 bb       	out	0x11, r24	; 17
			light_index = 0;
			checkButtons();
 2ba:	4e df       	rcall	.-356    	; 0x158 <checkButtons>
			delay(1000);
		}
		//Off State
		else if(state == OFF_STATE) {
			PORTF &= ~0x0F;
			light_index = 0;
 2bc:	ce 2d       	mov	r28, r14
 2be:	df 2d       	mov	r29, r15
 2c0:	bc cf       	rjmp	.-136    	; 0x23a <main+0x3a>

000002c2 <__vector_11>:
	return buttonPress;
}


ISR(PCINT2_vect)
{
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	0b b6       	in	r0, 0x3b	; 59
 2ce:	0f 92       	push	r0
 2d0:	2f 93       	push	r18
 2d2:	3f 93       	push	r19
 2d4:	4f 93       	push	r20
 2d6:	5f 93       	push	r21
 2d8:	6f 93       	push	r22
 2da:	7f 93       	push	r23
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
 2e0:	af 93       	push	r26
 2e2:	bf 93       	push	r27
 2e4:	ef 93       	push	r30
 2e6:	ff 93       	push	r31
	cli();
 2e8:	f8 94       	cli
	// Cycle interrupt
	if(0x01 & PINK)	{ //Checking that PORTK pin0 is high, meaning button has been released
 2ea:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 2ee:	80 ff       	sbrs	r24, 0
 2f0:	0b c0       	rjmp	.+22     	; 0x308 <__vector_11+0x46>
		delay_usec(110);
 2f2:	8e e6       	ldi	r24, 0x6E	; 110
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	09 df       	rcall	.-494    	; 0x10a <delay_usec>
		if(0x01 & PINK)
 2f8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 2fc:	80 ff       	sbrs	r24, 0
 2fe:	12 c0       	rjmp	.+36     	; 0x324 <__vector_11+0x62>
			button0Pressed = true;
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <button0Pressed>
 306:	0e c0       	rjmp	.+28     	; 0x324 <__vector_11+0x62>
	}
	// Flashing interrupt
	else if(0x02 & PINK)	{ //Checking that PORTK pin0 is high, meaning button has been released
 308:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 30c:	81 ff       	sbrs	r24, 1
 30e:	0a c0       	rjmp	.+20     	; 0x324 <__vector_11+0x62>
		delay_usec(110);
 310:	8e e6       	ldi	r24, 0x6E	; 110
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	fa de       	rcall	.-524    	; 0x10a <delay_usec>
		if(0x02 & PINK)
 316:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 31a:	81 ff       	sbrs	r24, 1
 31c:	03 c0       	rjmp	.+6      	; 0x324 <__vector_11+0x62>
			button1Pressed = true;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <button1Pressed>
	}
	sei();
 324:	78 94       	sei
}
 326:	ff 91       	pop	r31
 328:	ef 91       	pop	r30
 32a:	bf 91       	pop	r27
 32c:	af 91       	pop	r26
 32e:	9f 91       	pop	r25
 330:	8f 91       	pop	r24
 332:	7f 91       	pop	r23
 334:	6f 91       	pop	r22
 336:	5f 91       	pop	r21
 338:	4f 91       	pop	r20
 33a:	3f 91       	pop	r19
 33c:	2f 91       	pop	r18
 33e:	0f 90       	pop	r0
 340:	0b be       	out	0x3b, r0	; 59
 342:	0f 90       	pop	r0
 344:	0f be       	out	0x3f, r0	; 63
 346:	0f 90       	pop	r0
 348:	1f 90       	pop	r1
 34a:	18 95       	reti

0000034c <_exit>:
 34c:	f8 94       	cli

0000034e <__stop_program>:
 34e:	ff cf       	rjmp	.-2      	; 0x34e <__stop_program>
